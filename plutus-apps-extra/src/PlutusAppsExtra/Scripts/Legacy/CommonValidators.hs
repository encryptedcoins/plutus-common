{-# LANGUAGE DataKinds             #-}
{-# LANGUAGE DerivingStrategies    #-}
{-# LANGUAGE FlexibleContexts      #-}
{-# LANGUAGE FlexibleInstances     #-}
{-# LANGUAGE MultiParamTypeClasses #-}
{-# LANGUAGE NoImplicitPrelude     #-}
{-# LANGUAGE OverloadedStrings     #-}
{-# LANGUAGE ScopedTypeVariables   #-}
{-# LANGUAGE TypeApplications      #-}
{-# LANGUAGE TypeFamilies          #-}

-- | Due to the transition to a new version of the GHC and updating versions
-- of the Plutus libraries, some Plutus scripts began to be compiled a little
-- differently, which led to a change in their hash and a breakdown in backward
-- compatibility in encoins-core. This module contains the initial version of `alwaysFalseValidator`.
module PlutusAppsExtra.Scripts.Legacy.CommonValidators where

import           Cardano.Ledger.Babbage         (Babbage)
import           Cardano.Ledger.Core
import           Cardano.Ledger.Plutus          (Plutus (..), PlutusBinary (..), PlutusLanguage (..), PlutusRunnable (..))
import qualified Data.ByteString.Short          as SBS
import           Data.Maybe                     (Maybe (..), fromJust)
import           Data.Text                      (Text)
import           Ledger                         (mkValidatorScript)
import           Ledger.Typed.Scripts           (Language (..), Validator, Versioned (..))
import           Plutus.Script.Utils.V2.Address (mkValidatorAddress)
import           Plutus.Script.Utils.V2.Scripts (ValidatorHash, validatorHash)
import           PlutusCore.Core                (plcVersion100)
import           PlutusLedgerApi.Common         (ScriptNamedDeBruijn (..), deserialisedScript)
import           PlutusLedgerApi.V3             (Address)
import           PlutusTx.Code                  (CompiledCodeIn (..))
import           PlutusTx.Lift                  (liftProgram)
import           PlutusTx.Prelude               (Either (..), Integer, flip, ($), (.))
import qualified Prelude                        as Haskell
import           Text.Hex                       (decodeHex)
import           Unsafe.Coerce                  (unsafeCoerce)
import           UntypedPlutusCore              (applyProgram)

alwaysFalseValidator :: Integer -> Validator
alwaysFalseValidator salt = mkValidatorScript $
  let bs = fromJust $ decodeHex alwaysFalseValidatorUplc
      Right (PlutusRunnable r) = decodePlutusRunnable @PlutusV2 (eraProtVerLow @Babbage) $ Plutus $ PlutusBinary $ SBS.toShort bs
      ScriptNamedDeBruijn progFun = deserialisedScript r
      progSalt = Haskell.snd $ liftProgram plcVersion100 salt
      Right prog = applyProgram progFun progSalt
  in DeserializedCode (unsafeCoerce prog) Nothing Haskell.mempty

alwaysFalseValidatorV :: Integer -> Versioned Validator
alwaysFalseValidatorV = flip Versioned PlutusV2 . alwaysFalseValidator

alwaysFalseValidatorHash :: Integer -> ValidatorHash
alwaysFalseValidatorHash = validatorHash . alwaysFalseValidator

alwaysFalseValidatorAddress :: Integer -> Address
alwaysFalseValidatorAddress = mkValidatorAddress . alwaysFalseValidator

alwaysFalseValidatorUplc :: Text
alwaysFalseValidatorUplc = "59080101000032323232323232323232323232323233223232323232322300222201632322222323253353330063357389211944617461206465636f646564207375636365737366756c6c790030080053357389211d52656465656d6572206465636f646564207375636365737366756c6c790030070043357389212353637269707420636f6e74657874206465636f646564207375636365737366756c6c79003333573466e1cd55cea80124000466442466002006004646464646464646464646464646666ae68cdc39aab9d500c480008cccccccccccc88888888888848cccccccccccc00403403002c02802402001c01801401000c008cd4060064d5d0a80619a80c00c9aba1500b33501801a35742a014666aa038eb9406cd5d0a804999aa80e3ae501b35742a01066a0300466ae85401cccd54070091d69aba150063232323333573466e1cd55cea801240004664424660020060046464646666ae68cdc39aab9d5002480008cc8848cc00400c008cd40b9d69aba15002302f357426ae8940088c98c80cccd5ce01a01981889aab9e5001137540026ae854008c8c8c8cccd5cd19b8735573aa004900011991091980080180119a8173ad35742a004605e6ae84d5d1280111931901999ab9c034033031135573ca00226ea8004d5d09aba2500223263202f33573806005e05a26aae7940044dd50009aba1500533501875c6ae854010ccd540700808004d5d0a801999aa80e3ae200135742a00460446ae84d5d1280111931901599ab9c02c02b029135744a00226ae8940044d5d1280089aba25001135744a00226ae8940044d5d1280089aba25001135744a00226ae8940044d55cf280089baa00135742a00460246ae84d5d1280111931900e99ab9c01e01d01b101c13263201c335738921035054350001c135573ca00226ea8005404d404848c88c008dd6000990009aa80b111999aab9f0012500a233500930043574200460066ae880080588c8c8cccd5cd19b8735573aa004900011991091980080180118061aba150023005357426ae8940088c98c8058cd5ce00b80b00a09aab9e5001137540024646464646666ae68cdc39aab9d5004480008cccc888848cccc00401401000c008c8c8c8cccd5cd19b8735573aa0049000119910919800801801180a9aba1500233500f014357426ae8940088c98c806ccd5ce00e00d80c89aab9e5001137540026ae854010ccd54021d728039aba150033232323333573466e1d4005200423212223002004357426aae79400c8cccd5cd19b875002480088c84888c004010dd71aba135573ca00846666ae68cdc3a801a400042444006464c6403a66ae7007807406c0680644d55cea80089baa00135742a00466a016eb8d5d09aba2500223263201733573803002e02a26ae8940044d5d1280089aab9e500113754002266aa002eb9d6889119118011bab00132001355013223233335573e0044a010466a00e66442466002006004600c6aae754008c014d55cf280118021aba200301413574200222440042442446600200800624464646666ae68cdc3a800a40004642446004006600a6ae84d55cf280191999ab9a3370ea0049001109100091931900919ab9c01301201000f135573aa00226ea80048c8c8cccd5cd19b875001480188c848888c010014c01cd5d09aab9e500323333573466e1d400920042321222230020053009357426aae7940108cccd5cd19b875003480088c848888c004014c01cd5d09aab9e500523333573466e1d40112000232122223003005375c6ae84d55cf280311931900919ab9c01301201000f00e00d135573aa00226ea80048c8c8cccd5cd19b8735573aa004900011991091980080180118029aba15002375a6ae84d5d1280111931900719ab9c00f00e00c135573ca00226ea80048c8cccd5cd19b8735573aa002900011bae357426aae7940088c98c8030cd5ce00680600509baa001232323232323333573466e1d4005200c21222222200323333573466e1d4009200a21222222200423333573466e1d400d2008233221222222233001009008375c6ae854014dd69aba135744a00a46666ae68cdc3a8022400c4664424444444660040120106eb8d5d0a8039bae357426ae89401c8cccd5cd19b875005480108cc8848888888cc018024020c030d5d0a8049bae357426ae8940248cccd5cd19b875006480088c848888888c01c020c034d5d09aab9e500b23333573466e1d401d2000232122222223005008300e357426aae7940308c98c8054cd5ce00b00a80980900880800780700689aab9d5004135573ca00626aae7940084d55cf280089baa0012323232323333573466e1d400520022333222122333001005004003375a6ae854010dd69aba15003375a6ae84d5d1280191999ab9a3370ea0049000119091180100198041aba135573ca00c464c6401c66ae7003c03803002c4d55cea80189aba25001135573ca00226ea80048c8c8cccd5cd19b875001480088c8488c00400cdd71aba135573ca00646666ae68cdc3a8012400046424460040066eb8d5d09aab9e500423263200b33573801801601201026aae7540044dd500089119191999ab9a3370ea00290021091100091999ab9a3370ea00490011190911180180218031aba135573ca00846666ae68cdc3a801a400042444004464c6401866ae700340300280240204d55cea80089baa0012323333573466e1d40052002212200223333573466e1d40092000200523263200833573801201000c00a26aae74dd5000891000891999ab9a3370e6aae74dd5000a40004008464c6400866ae7001401000926120014910350543100112323001001223300330020020011"
